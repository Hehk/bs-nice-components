// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Jest               = require("bs-jest/lib/js/src/jest.js");
var $$Array            = require("bs-platform/lib/js/array.js");
var Block              = require("bs-platform/lib/js/block.js");
var Curry              = require("bs-platform/lib/js/curry.js");
var Enzyme             = require("bs-enzyme/lib/js/src/Enzyme.js");
var Enzyme$1           = require("enzyme");
var ReasonReact        = require("reason-react/lib/js/src/ReasonReact.js");
var NiceComponents     = require("../src/NiceComponents.bs.js");
var EnzymeAdapterReact = require("enzyme-adapter-react-16");

Enzyme.configureEnzyme(new EnzymeAdapterReact());

describe("make", (function () {
        Jest.test("Basic component renders", (function () {
                var Basic = NiceComponents.make("div", /* None */0, /* array */[]);
                return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](+Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._2(Basic[/* make */5], /* None */0, /* array */[]))).exists()));
              }));
        Jest.test("Component tag changes if ~tag is different", (function () {
                var tag = "footer";
                var Test = NiceComponents.make(tag, /* None */0, /* array */[]);
                return Jest.Expect[/* toBe */2](tag, Jest.Expect[/* expect */0](Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._2(Test[/* make */5], /* None */0, /* array */[]))).type()));
              }));
        return Jest.test("Component debugName defaults to it's tag", (function () {
                      var tag = "table";
                      var Test = NiceComponents.make(tag, /* None */0, /* array */[]);
                      return Jest.Expect[/* toBe */2](tag, Jest.Expect[/* expect */0](Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._2(Test[/* make */5], /* None */0, /* array */[]))).name()));
                    }));
      }));

describe("addStyles function", (function () {
        Jest.test("Adds styles to unstyled component", (function () {
                var styles = /* array */[/* Color */Block.__(63, [/* Red */119])];
                var UnStyled = NiceComponents.make("div", /* None */0, /* array */[]);
                var Styled = NiceComponents.addStyles(styles, UnStyled);
                return Jest.Expect[/* toEqual */12](Styled[/* __styles */2], Jest.Expect[/* expect */0](styles));
              }));
        Jest.test("new styles are appended to old ones", (function () {
                var styles = /* array */[/* Color */Block.__(63, [/* Red */119])];
                var newStyles = /* array */[/* BackgroundColor */Block.__(49, [/* White */142])];
                var Original = NiceComponents.make("div", /* None */0, styles);
                var Modified = NiceComponents.addStyles(newStyles, Original);
                return Jest.Expect[/* toEqual */12](Modified[/* __styles */2], Jest.Expect[/* expect */0]($$Array.append(styles, newStyles)));
              }));
        return Jest.test("ClassNames should not equal before and after adding styles", (function () {
                      var styles = /* array */[/* Color */Block.__(63, [/* Red */119])];
                      var newStyles = /* array */[/* BackgroundColor */Block.__(49, [/* White */142])];
                      var Original = NiceComponents.make("div", /* None */0, styles);
                      var Modified = NiceComponents.addStyles(newStyles, Original);
                      return Jest.Expect[/* toBe */2](/* false */0, Jest.Expect[/* expect */0](+(Original[/* className */3] === Modified[/* className */3])));
                    }));
      }));

describe("AddStyles functor", (function () {
        Jest.test("Adds styles to unstyled component", (function () {
                var styles = /* array */[/* Color */Block.__(63, [/* Red */119])];
                var UnStyled = NiceComponents.make("div", /* None */0, /* array */[]);
                var Styled = NiceComponents.AddStyles(/* module */[/* newStyles */styles])(UnStyled);
                return Jest.Expect[/* toEqual */12](Styled[/* __styles */4], Jest.Expect[/* expect */0](styles));
              }));
        Jest.test("new styles are appended to old ones", (function () {
                var styles = /* array */[/* Color */Block.__(63, [/* Red */119])];
                var newStyles = /* array */[/* BackgroundColor */Block.__(49, [/* White */142])];
                var Original = NiceComponents.make("div", /* None */0, styles);
                var Modified = NiceComponents.AddStyles(/* module */[/* newStyles */newStyles])(Original);
                return Jest.Expect[/* toEqual */12](Modified[/* __styles */4], Jest.Expect[/* expect */0]($$Array.append(styles, newStyles)));
              }));
        return Jest.test("ClassNames should not equal before and after adding styles", (function () {
                      var styles = /* array */[/* Color */Block.__(63, [/* Red */119])];
                      var newStyles = /* array */[/* BackgroundColor */Block.__(49, [/* White */142])];
                      var Original = NiceComponents.make("div", /* None */0, styles);
                      var Modified = NiceComponents.AddStyles(/* module */[/* newStyles */newStyles])(Original);
                      return Jest.Expect[/* toBe */2](/* false */0, Jest.Expect[/* expect */0](+(Original[/* className */3] === Modified[/* className */5])));
                    }));
      }));

describe("NiceComponents.<tag> renders the correct tag", (function () {
        var noStyle = /* array */[];
        Jest.test("NiceComponents.div renders a div", (function () {
                var Div = NiceComponents.div(/* None */0, noStyle);
                return Jest.Expect[/* toBe */2]("div", Jest.Expect[/* expect */0](Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._2(Div[/* make */5], /* None */0, /* array */[]))).type()));
              }));
        Jest.test("NiceComponents.h1 renders a h1", (function () {
                var H1 = NiceComponents.h1(/* None */0, noStyle);
                return Jest.Expect[/* toBe */2]("h1", Jest.Expect[/* expect */0](Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._2(H1[/* make */5], /* None */0, /* array */[]))).type()));
              }));
        Jest.test("NiceComponents.span renders a span", (function () {
                var Span = NiceComponents.span(/* None */0, noStyle);
                return Jest.Expect[/* toBe */2]("span", Jest.Expect[/* expect */0](Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._2(Span[/* make */5], /* None */0, /* array */[]))).type()));
              }));
        Jest.test("NiceComponents.button renders a button", (function () {
                var Button = NiceComponents.button(/* None */0, noStyle);
                return Jest.Expect[/* toBe */2]("button", Jest.Expect[/* expect */0](Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._2(Button[/* make */5], /* None */0, /* array */[]))).type()));
              }));
        return Jest.test("NiceComponents.header renders a header", (function () {
                      var Header = NiceComponents.header(/* None */0, noStyle);
                      return Jest.Expect[/* toBe */2]("header", Jest.Expect[/* expect */0](Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._2(Header[/* make */5], /* None */0, /* array */[]))).type()));
                    }));
      }));

/*  Not a pure module */
